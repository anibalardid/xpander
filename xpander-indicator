#!/usr/bin/env python3

import os
import sys
import gi
try:
    gi.require_version('Gtk', '3.0')
    gi.require_version('AppIndicator3', '0.1')
except Exception as e:
    print(e)
    exit(-1)
from gi.repository import Gtk, GLib, AppIndicator3
try:
    from xpander import shared, service, xinterface, manager, gtkui
except ImportError as err:
    print('Running from source')
    from lib import shared, service, xinterface, manager, gtkui


class Indicator(object):

    def __init__(self):

        self.indicator = AppIndicator3.Indicator.new(
            'xpander',
            indicator_active,
            AppIndicator3.IndicatorCategory.APPLICATION_STATUS)
        self.indicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
        self.indicator.set_menu(self.build_menu())
        self.manager_ui = gtkui.ManagerUI()
        Gtk.main()

    def build_menu(self):

        menu = Gtk.Menu()
        shared.menu_toggle_service = Gtk.CheckMenuItem('Pause Expansion')
        shared.menu_toggle_service.connect('toggled', self.toggle_service)
        shared.menu_show_manager = Gtk.ImageMenuItem('Manager')
        icon_show_manager = Gtk.Image.new_from_icon_name(
            'preferences-system', 22)
        shared.menu_show_manager.set_image(icon_show_manager)
        shared.menu_show_manager.connect('activate', self.show_manager)
        menu_quit = Gtk.ImageMenuItem('Quit')
        icon_quit = Gtk.Image.new_from_icon_name('application-exit', 22)
        menu_quit.set_image(icon_quit)
        menu_quit.connect('activate', self.quit)
        menu.append(shared.menu_toggle_service)
        menu.append(shared.menu_show_manager)
        menu.append(menu_quit)
        menu.show_all()
        return menu

    def toggle_service(self, menu_item):

        shared.service.toggle_service()
        if shared.service_running:
            GLib.idle_add(self.indicator.set_icon, indicator_active)
        else:
            GLib.idle_add(self.indicator.set_icon, indicator_paused)

    def show_manager(self, menu_item):

        if not shared.manager_shown:
            self.manager_ui.show_all()
            shared.manager_shown = True
        else:
            self.manager_ui.hide()
            shared.manager_shown = False

    def quit(self, menu_item):

        shared.interface.stop()
        shared.service.stop()
        Gtk.main_quit()
        # If Gtk throws an error or just a warning, main_quit() might not
        # actually close the app
        sys.exit(0)


shared.service = service.Service()
shared.interface = xinterface.Interface()
shared.cmanager = manager.Config()
shared.pmanager = manager.Phrases()

if shared.config['indicator_theme_light']:
    if os.path.exists('data/xpander-active.svg'):
        indicator_active = os.path.abspath('data/xpander-active.svg')
        indicator_paused = os.path.abspath('data/xpander-paused.svg')
    else:
        indicator_active = 'xpander-active'
        indicator_paused = 'xpander-paused'
else:
    if os.path.exists('data/xpander-active-dark.svg'):
        indicator_active = os.path.abspath('data/xpander-active-dark.svg')
        indicator_paused = os.path.abspath('data/xpander-paused-dark.svg')
    else:
        indicator_active = 'xpander-active-dark'
        indicator_paused = 'xpander-paused-dark'

shared.service.start()
shared.interface.start()
shared.service.grab_hotkeys()
Indicator()
